/* This code sample provides a starter kit to implement server side logic for your Teams App in TypeScript,
 * refer to https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference for complete Azure Functions
 * developer guide.
 */

// Import polyfills for fetch required by msgraph-sdk-javascript.
import "isomorphic-fetch";
import { Context, HttpRequest } from "@azure/functions";
import { Client } from "@microsoft/microsoft-graph-client";
import { createMicrosoftGraphClient, TeamsFx, UserInfo } from "@microsoft/teamsfx";
import { QnAMakerRuntimeClient } from "@azure/cognitiveservices-qnamaker-runtime";
import { CognitiveServicesCredentials } from "@azure/ms-rest-azure-js";

interface Response {
  status: number;
  body: { [key: string]: any };
}

type TeamsfxContext = { [key: string]: any };

/**
 * This function handles requests from teamsfx client.
 * The HTTP request should contain an SSO token queried from Teams in the header.
 * Before trigger this function, teamsfx binding would process the SSO token and generate teamsfx configuration.
 *
 * This function initializes the teamsfx SDK with the configuration and calls these APIs:
 * - TeamsFx().setSsoToken() - Construct teamsfx instance with the received SSO token and initialized configuration.
 * - getUserInfo() - Get the user's information from the received SSO token.
 * - createMicrosoftGraphClient() - Get a graph client to access user's Microsoft 365 data.
 *
 * The response contains multiple message blocks constructed into a JSON object, including:
 * - An echo of the request body.
 * - The display name encoded in the SSO token.
 * - Current user's Microsoft 365 profile if the user has consented.
 *
 * @param {Context} context - The Azure Functions context object.
 * @param {HttpRequest} req - The HTTP request.
 * @param {teamsfxContext} TeamsfxContext - The context generated by teamsfx binding.
 */
export default async function run(
  context: Context,
  req: HttpRequest,
  teamsfxContext: TeamsfxContext
): Promise<Response> {
  context.log("HTTP trigger function processed a request.");

  // Initialize response.
  const res: Response = {
    status: 200,
    body: {},
  };

  const qnaReponse : Promise<Response> = await callLanguageStudioEndPoint(context);

  return qnaReponse;
}

async function callLanguageStudioEndPoint(context:  Context): Promise<any> {

    // Initialize response.
    const res: Response = {
      status: 200,
      body: {},
    };

  // const QNAMAKER_KEY = process.env["QNAMAKER_KEY"] || "74fad91798c64435b7128a33635afa63";
  // const QNAMAKER_ENDPOINT = process.env["QNAMAKER_ENDPOINT"] || "https://teams-qnabot.cognitiveservices.azure.com/";
  // const kbid = process.env["QNAMAKER_KNOWLEDGE_BASE_ID"] || "78220";

  const QNAMAKER_KEY : string = "74fad91798c64435b7128a33635afa63";
  const QNAMAKER_ENDPOINT : string = `https://teams-qnabot.cognitiveservices.azure.com/`;
  const kbid: string = "78220";

  const cognitiveServicesCredentials = new CognitiveServicesCredentials(QNAMAKER_KEY);
  const client = new QnAMakerRuntimeClient(cognitiveServicesCredentials, QNAMAKER_ENDPOINT);
  const customHeaders = { Authorization: `EndpointKey ${QNAMAKER_KEY}` };

  // A question you'd like to get a response for, from the knowledge base. For example
  const question = "How are you?"; 

  // Maximum number of answer to retreive
  const top = 1;

  // Find only answers that contain these metadata
  const strictFilters = [{ name: "editorial", value: "chitchat" }];

  try{
    const result = await client.runtime.generateAnswer(
      kbid,
      { question, top, strictFilters },
      { customHeaders }
    );

    res.body = result;
  }catch (e) {
    context.log.error(e);
    return {
      status: 500,
      body: {
        error:
          "Failed to retrieve user profile from Microsoft Graph. The application may not be authorized.",
      },
    };
  }

  return res;
}
